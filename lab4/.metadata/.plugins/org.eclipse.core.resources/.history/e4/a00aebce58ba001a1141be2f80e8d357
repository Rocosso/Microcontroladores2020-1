#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

void SCI_send(char);
unsigned char flag_rx;		//variable dummy para mecanismo que limpia interrupcion de SCI_rx

void kbi_init() {
	KBISC_KBIE = 0;//deshabilitar interrupcion para evitar falsas interrupciones
	KBISC_KBIMOD = 0;			//interrupcion por solo flanco
	KBIES = 0x00;				//interrupcion por flanco de bajada
	KBIPE = 0x80;		//habilitacion de pines como fuente de interrupcion
	KBISC_KBACK = 0;			//bandera para evitar falsas interrupciones
	KBISC_KBIE = 1;			//habilitacion de la interrupcion por KBI
}

interrupt 18 void KBI_ISR() {
	KBISC_KBACK = 1;				//acknowledge de la interrupcion por kbi
	SCI_send(14);
}

interrupt VectorNumber_Vscirx void SCI_RX(){
	flag_rx=SCIS1_RDRF; //Verifica si ha recibido dato y guarda en flag
	if(SCID == 101){
			PTBD_PTBD0 = !PTBD_PTBD0;
		}
}

void SCI_init(){
	SCIBDH = 0;
	SCIBDL = 26;  //baud rate de 9600
	SCIC1 = 0x00; //CONFIGURA EL PRIMER REGISTRO
	SCIC2_TE = 1; //HABILITA TRANSMISION
	SCIC2_RE = 1; //HABILITA RECEPCION
	SCIC2_RIE = 1; //HABILITA INTERRUPCION DEL RECEPTOR
}

void SCI_send(char dato){
	while(SCIS1_TDRE == 0);
	SCID = dato+48; //para convertirlo a ASCII
	return;
}

void main(void) {
	SOPT1 = 0b01010010;
	PTBDD = 0b00001111;				//inicializacion del puerto B
	PTBPE = 0x80;				//enable resistencias pull	
	
	PTBDD_PTBDD0 = 1;
	PTBD_PTBD0 = 1;
	
	kbi_init();
	SCI_init();
	
  EnableInterrupts;  

  for(;;) {
    
  } /* loop forever */
  /* please make sure that you never leave main */
}
